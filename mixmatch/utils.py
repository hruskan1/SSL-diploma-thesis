"""utils.py: Utilites"""

import kornia 
import matplotlib.pyplot as plt
import torch

def plot_batch(batch:torch.Tensor, num_rows=1,imgsize=(2,2)):
    """Plots batch [N,C,H,W] in separate N imgs,implicitly clips values (without warning)"""
    
    # Implicitly clip
    batch = batch.clip(0,1) if _is_torch_float(batch.dtype) else batch.clip(0,255)
    
    batch = kornia.utils.tensor_to_image(batch) 
    n = batch.shape[0]
    num_cols = n // num_rows + bool(n % num_rows)
    fig, ax = plt.subplots(num_rows, num_cols, figsize=(num_cols*imgsize[0], num_rows*imgsize[1]))
    
    ax = ax.reshape(1,-1) if ax.ndim == 1 else ax # enforce 2dim

    for i in range(n):
        row = i // num_cols
        col = i % num_cols
        ax[row, col].imshow(batch[i])
        ax[row, col].axis("off")
    plt.tight_layout()
    plt.show()

def _is_torch_float(dtype):
    return dtype == torch.float or dtype == torch.float16 or dtype == torch.float32 or dtype == torch.float64


import torch

import torch

def set_channel(batch, value, channel):
    """
    Generated by GPT-3 Model
    Set the value of a specified channel in a batch of images.

    Args:
        batch (torch.Tensor): Batch of images with shape (..., C, H, W).
        value (float): Value to set for the specified channel.
        channel (int): Index of the channel to set the value for (0 for red, 1 for green, 2 for blue).

    Returns:
        torch.Tensor: Batch of images with the specified channel set to the specified value.
    """

    if channel < 0 or channel >= batch.shape[-3]:
        raise ValueError("Channel must be between 0 and C-1.")

    # select the range of channels corresponding to the specified channel
    batch[..., channel:channel+1, :, :] = value

    return batch

